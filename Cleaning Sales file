{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#install required libraries\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading the excel file into the pandas dataframe, defining the file paths\n",
    "excel_file = r\"\\\\Mac\\Home\\Documents\\MDDB\\Database Management\\sales.xlsx\"\n",
    "df = pd.read_excel(excel_file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#renaming columns the right way\n",
    "column_mapping = {\n",
    "    'title': 'movie_title',\n",
    "    'worldwide_box_office': 'worldwide_boxoffice',\n",
    "}\n",
    "df = df.rename(columns=column_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#changing the excact dates to only the month in the 'release_date' column\n",
    "df['release_date'] = df['release_date'].str.extract(r'(\\w+)', expand=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#adding the 'movie_id' column\n",
    "df.insert(0, 'movie_id', range(1, len(df) + 1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping the duplicates\n",
    "df = df.drop_duplicates()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "#specifying the datatypes for the columns\n",
    "data_types = {\n",
    "    'movie_id': int,\n",
    "    'release_date': str,\n",
    "    'movie_title': str,\n",
    "    'worldwide_boxoffice': float,  \n",
    "    'production_budget': float,    \n",
    "}\n",
    "df = df.astype(data_types)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#filling in any missing values\n",
    "missing_fill_values = {\n",
    "    'release_date': 'no date',\n",
    "    'movie_title': 'unknown title',\n",
    "    'worldwide_boxoffice': 0.0,\n",
    "    'production_budget': 0.0,  \n",
    "}\n",
    "df = df.fillna(value=missing_fill_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#removing special characters from the column 'movie_title' and replacing them with Latin characters\n",
    "df['movie_title'] = df['movie_title'].str.replace('[^a-zA-Z0-9\\s]', '', regex=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#dropping the rows with NaN values\n",
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining the file path for the csv file\n",
    "csv_file_path = r\"\\\\Mac\\Home\\Documents\\MDDB\\Database Management\\sales.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#converting/saving the dataframe as csv file\n",
    "df.to_csv(csv_file_path, index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       movie_id release_date                          movie_title  \\\n",
      "0             1      January                         Bakha Satang   \n",
      "1             2      January                            Antitrust   \n",
      "4             5      January                   A Walk to Remember   \n",
      "6             7          May                           Takht siah   \n",
      "7             8      January  Angry Monk Reflections on Tibet The   \n",
      "...         ...          ...                                  ...   \n",
      "30607     30608      January               Jokbeoldu sinmun iyagi   \n",
      "30608     30609        March                     My Salinger Year   \n",
      "30609     30610      January                    Escort Vehicle 36   \n",
      "30610     30611          May                              The Dry   \n",
      "30611     30612      January          Posledniy bogatyr Koren Zla   \n",
      "\n",
      "                   genre  worldwide_boxoffice  production_budget  \\\n",
      "0                  Drama              76576.0                0.0   \n",
      "1      Thriller/Suspense           17865209.0         30000000.0   \n",
      "4                  Drama           46060861.0         11000000.0   \n",
      "6                  Drama                  0.0                0.0   \n",
      "7            Documentary                  0.0                0.0   \n",
      "...                  ...                  ...                ...   \n",
      "30607        Documentary              12356.0                0.0   \n",
      "30608              Drama             968849.0                0.0   \n",
      "30609             Action             240000.0                0.0   \n",
      "30610  Thriller/Suspense           17351923.0                0.0   \n",
      "30611          Adventure           33396899.0                0.0   \n",
      "\n",
      "                                                     url  \n",
      "0      https://www.the-numbers.com/movie/Bakha-Satang...  \n",
      "1            https://www.the-numbers.com/movie/Antitrust  \n",
      "4      https://www.the-numbers.com/movie/Walk-to-Reme...  \n",
      "6          https://www.the-numbers.com/movie/Takhte-siah  \n",
      "7      https://www.the-numbers.com/movie/Angry-Monk-R...  \n",
      "...                                                  ...  \n",
      "30607  https://www.the-numbers.com/movie/Jokbeoldu-si...  \n",
      "30608  https://www.the-numbers.com/movie/My-Salinger-...  \n",
      "30609  https://www.the-numbers.com/movie/Escort-Vehic...  \n",
      "30610  https://www.the-numbers.com/movie/Dry-The-(Aus...  \n",
      "30611  https://www.the-numbers.com/movie/Posledniy-bo...  \n",
      "\n",
      "[28908 rows x 7 columns]\n"
     ]
    }
   ],
   "source": [
    "print(df)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
